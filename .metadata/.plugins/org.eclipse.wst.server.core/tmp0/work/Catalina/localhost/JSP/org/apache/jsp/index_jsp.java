/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.64
 * Generated at: 2021-03-26 12:13:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<!-- HTML 주석 : 개발자 도구 탭에 노출됨 -->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<h1>* JSP (Java Server Page)</h1>\r\n");
      out.write("\t\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tJSP란, HTML형식 내에 자바코드를 사용할 수 있는 \"자바 언어\"로 <br>\r\n");
      out.write("\t\t서블릿(Java코드)에서 응답화면(html)을 구현했던 복잡함을 간단하게 해결 가능 <br>\r\n");
      out.write("\t\t=> 즉, JSP의 가장 큰 장점은 Servlet에서는 비즈니스 로직 처리에만 집중하고 <br>\r\n");
      out.write("\t\t     응답화면을 만들어(프레젠테이션로직)내는건 JSP에서 집중하게끔 분리할 수 있는 것\r\n");
      out.write("\t</p>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\r\n");
      out.write("\t<h1>JSP Elements 표현법</h1>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>1. JSP 스크립팅 원소 (Scripting Element)</h2>\r\n");
      out.write("\t<p>JSP페이지에서 자바 코드를 기술할 수 있게 해주는 기능</p>\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\t선언문 : &lt;%!  자바코드  %&gt; <br>\r\n");
      out.write("\t\t\t멤버변수와 메소드를 선언하기 위해 사용 <br><br>\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\t스크립틀릿 : &lt;%  자바코드   %&gt; <br>\r\n");
      out.write("\t\t\tJSP에서 자바코드를 기술하기 위한 제일 기본적인 표현법<br><br>\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\t표현식(출력식) : &lt;%=  자바코드   %&gt; <br>\r\n");
      out.write("\t\t\t자바에서 작성한 값(또는 메소드 호출)을 화면에 출력하기 위해 사용\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\t\r\n");
      out.write("\t<a href=\"views/01_ScriptingElement.jsp\">View details &raquo;</a>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>2. 지시어 (Directive) &lt;%@ page|include|taglib 속성=\"속성값\" 속성=\"속성값\" .. %&gt;</h2>\r\n");
      out.write("\t<p>현재 해당 JSP 페이지의 전체 정보를 기술할 때 쓰임</p>\r\n");
      out.write("\t\r\n");
      out.write("\t<ol>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\tpage 지시자 : 현재의 JSP페이지를 처리하는데 필요한 각종 속성을 기술하는 부분 (JSP문서의 최상단에 위치) <br>\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li>language : 현재 jsp에서 사용할 스크립트 언어 유형을 지정</li>\r\n");
      out.write("\t\t\t\t<li>contentType : 웹 브라우저가 받아 볼 페이지의 형식, 인코딩 방식 지정</li>\r\n");
      out.write("\t\t\t\t<li>pageEncoding : jsp파일에 기록된 자바코드의 인코딩 방식을 지정</li>\r\n");
      out.write("\t\t\t\t<li>import : 자바와 import와 같은 의미</li>\r\n");
      out.write("\t\t\t\t<li>errorPage / isErrorPage : 오류페이지 관련 </li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t\t<a href=\"views/02_directivePage.jsp\">View details &raquo;</a>\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\tinclude 지시자 : 현재 jsp에서 또다른 jsp를 포함하고자 할 때 사용하는 지시자 <br>\r\n");
      out.write("\t\t\t<a href=\"views/03_directiveInclude.jsp\">View details &raquo;</a>\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t\t<li>\r\n");
      out.write("\t\t\ttaglib 지시자 : JSP의 기능을 좀 더 확장할 수 있는 인자로 추가적인 라이브러리 등록 구문\r\n");
      out.write("\t\t</li>\r\n");
      out.write("\t</ol>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>피자주문페이지  --주문요청--> 요청받아서 처리해주는 Servlet --> 피자결제페이지(응답페이지) </h2>\r\n");
      out.write("\t<a href=\"views/04_pizzaOrderForm.jsp\">피자주문페이지</a>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
